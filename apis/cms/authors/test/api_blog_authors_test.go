/*
Blog Post endpoints

Testing BlogAuthorsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package authors

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/pyscht/hubspot-go-api/apis/cms/authors"
)

func Test_authors_BlogAuthorsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BlogAuthorsApiService DeleteCmsV3BlogsAuthorsObjectIdArchive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId string

		httpRes, err := apiClient.BlogAuthorsApi.DeleteCmsV3BlogsAuthorsObjectIdArchive(context.Background(), objectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsApiService GetCmsV3BlogsAuthorsGetPage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogAuthorsApi.GetCmsV3BlogsAuthorsGetPage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsApiService GetCmsV3BlogsAuthorsObjectIdGetById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId string

		resp, httpRes, err := apiClient.BlogAuthorsApi.GetCmsV3BlogsAuthorsObjectIdGetById(context.Background(), objectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsApiService PatchCmsV3BlogsAuthorsObjectIdUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId string

		resp, httpRes, err := apiClient.BlogAuthorsApi.PatchCmsV3BlogsAuthorsObjectIdUpdate(context.Background(), objectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsApiService PostCmsV3BlogsAuthorsBatchArchiveArchiveBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.BlogAuthorsApi.PostCmsV3BlogsAuthorsBatchArchiveArchiveBatch(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsApiService PostCmsV3BlogsAuthorsBatchCreateCreateBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogAuthorsApi.PostCmsV3BlogsAuthorsBatchCreateCreateBatch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsApiService PostCmsV3BlogsAuthorsBatchReadReadBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogAuthorsApi.PostCmsV3BlogsAuthorsBatchReadReadBatch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsApiService PostCmsV3BlogsAuthorsBatchUpdateUpdateBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogAuthorsApi.PostCmsV3BlogsAuthorsBatchUpdateUpdateBatch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsApiService PostCmsV3BlogsAuthorsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogAuthorsApi.PostCmsV3BlogsAuthorsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsApiService PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroupAttachToLangGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogAuthorsApi.PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroupAttachToLangGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsApiService PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariationCreateLangVariation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogAuthorsApi.PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariationCreateLangVariation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsApiService PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroupDetachFromLangGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogAuthorsApi.PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroupDetachFromLangGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsApiService PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguagesUpdateLangs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogAuthorsApi.PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguagesUpdateLangs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsApiService PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimarySetLangPrimary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.BlogAuthorsApi.PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimarySetLangPrimary(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
