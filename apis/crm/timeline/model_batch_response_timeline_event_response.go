/*
Timeline events

This feature allows an app to create and configure custom events that can show up in the timelines of certain CRM objects like contacts, companies, tickets, or deals. You'll find multiple use cases for this API in the sections below.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package timeline

import (
	"encoding/json"
	"time"
)

// checks if the BatchResponseTimelineEventResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchResponseTimelineEventResponse{}

// BatchResponseTimelineEventResponse The state of the batch event request.
type BatchResponseTimelineEventResponse struct {
	// The status of the batch response. Should always be COMPLETED if processed.
	Status string `json:"status"`
	// Successfully created events.
	Results []TimelineEventResponse `json:"results"`
	// The time the request occurred.
	RequestedAt *time.Time `json:"requestedAt,omitempty"`
	// The time the request began processing.
	StartedAt time.Time `json:"startedAt"`
	// The time the request was completed.
	CompletedAt time.Time          `json:"completedAt"`
	Links       *map[string]string `json:"links,omitempty"`
}

// NewBatchResponseTimelineEventResponse instantiates a new BatchResponseTimelineEventResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchResponseTimelineEventResponse(status string, results []TimelineEventResponse, startedAt time.Time, completedAt time.Time) *BatchResponseTimelineEventResponse {
	this := BatchResponseTimelineEventResponse{}
	this.Status = status
	this.Results = results
	this.StartedAt = startedAt
	this.CompletedAt = completedAt
	return &this
}

// NewBatchResponseTimelineEventResponseWithDefaults instantiates a new BatchResponseTimelineEventResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchResponseTimelineEventResponseWithDefaults() *BatchResponseTimelineEventResponse {
	this := BatchResponseTimelineEventResponse{}
	return &this
}

// GetStatus returns the Status field value
func (o *BatchResponseTimelineEventResponse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BatchResponseTimelineEventResponse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BatchResponseTimelineEventResponse) SetStatus(v string) {
	o.Status = v
}

// GetResults returns the Results field value
func (o *BatchResponseTimelineEventResponse) GetResults() []TimelineEventResponse {
	if o == nil {
		var ret []TimelineEventResponse
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *BatchResponseTimelineEventResponse) GetResultsOk() ([]TimelineEventResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *BatchResponseTimelineEventResponse) SetResults(v []TimelineEventResponse) {
	o.Results = v
}

// GetRequestedAt returns the RequestedAt field value if set, zero value otherwise.
func (o *BatchResponseTimelineEventResponse) GetRequestedAt() time.Time {
	if o == nil || IsNil(o.RequestedAt) {
		var ret time.Time
		return ret
	}
	return *o.RequestedAt
}

// GetRequestedAtOk returns a tuple with the RequestedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponseTimelineEventResponse) GetRequestedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RequestedAt) {
		return nil, false
	}
	return o.RequestedAt, true
}

// HasRequestedAt returns a boolean if a field has been set.
func (o *BatchResponseTimelineEventResponse) HasRequestedAt() bool {
	if o != nil && !IsNil(o.RequestedAt) {
		return true
	}

	return false
}

// SetRequestedAt gets a reference to the given time.Time and assigns it to the RequestedAt field.
func (o *BatchResponseTimelineEventResponse) SetRequestedAt(v time.Time) {
	o.RequestedAt = &v
}

// GetStartedAt returns the StartedAt field value
func (o *BatchResponseTimelineEventResponse) GetStartedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value
// and a boolean to check if the value has been set.
func (o *BatchResponseTimelineEventResponse) GetStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartedAt, true
}

// SetStartedAt sets field value
func (o *BatchResponseTimelineEventResponse) SetStartedAt(v time.Time) {
	o.StartedAt = v
}

// GetCompletedAt returns the CompletedAt field value
func (o *BatchResponseTimelineEventResponse) GetCompletedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value
// and a boolean to check if the value has been set.
func (o *BatchResponseTimelineEventResponse) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompletedAt, true
}

// SetCompletedAt sets field value
func (o *BatchResponseTimelineEventResponse) SetCompletedAt(v time.Time) {
	o.CompletedAt = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *BatchResponseTimelineEventResponse) GetLinks() map[string]string {
	if o == nil || IsNil(o.Links) {
		var ret map[string]string
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponseTimelineEventResponse) GetLinksOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *BatchResponseTimelineEventResponse) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]string and assigns it to the Links field.
func (o *BatchResponseTimelineEventResponse) SetLinks(v map[string]string) {
	o.Links = &v
}

func (o BatchResponseTimelineEventResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchResponseTimelineEventResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["results"] = o.Results
	if !IsNil(o.RequestedAt) {
		toSerialize["requestedAt"] = o.RequestedAt
	}
	toSerialize["startedAt"] = o.StartedAt
	toSerialize["completedAt"] = o.CompletedAt
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableBatchResponseTimelineEventResponse struct {
	value *BatchResponseTimelineEventResponse
	isSet bool
}

func (v NullableBatchResponseTimelineEventResponse) Get() *BatchResponseTimelineEventResponse {
	return v.value
}

func (v *NullableBatchResponseTimelineEventResponse) Set(val *BatchResponseTimelineEventResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchResponseTimelineEventResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchResponseTimelineEventResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchResponseTimelineEventResponse(val *BatchResponseTimelineEventResponse) *NullableBatchResponseTimelineEventResponse {
	return &NullableBatchResponseTimelineEventResponse{value: val, isSet: true}
}

func (v NullableBatchResponseTimelineEventResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchResponseTimelineEventResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
