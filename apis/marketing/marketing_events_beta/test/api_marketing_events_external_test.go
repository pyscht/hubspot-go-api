/*
Marketing Events Extension

Testing MarketingEventsExternalApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package marketing_events_beta

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/pyscht/hubspot-go-api/apis/marketing/marketing_events_beta"
)

func Test_marketing_events_beta_MarketingEventsExternalApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MarketingEventsExternalApiService DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalEventId string

		httpRes, err := apiClient.MarketingEventsExternalApi.DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive(context.Background(), externalEventId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MarketingEventsExternalApiService GetMarketingV3MarketingEventsEventsExternalEventIdGetById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalEventId string

		resp, httpRes, err := apiClient.MarketingEventsExternalApi.GetMarketingV3MarketingEventsEventsExternalEventIdGetById(context.Background(), externalEventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MarketingEventsExternalApiService PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalEventId string

		resp, httpRes, err := apiClient.MarketingEventsExternalApi.PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate(context.Background(), externalEventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MarketingEventsExternalApiService PostMarketingV3MarketingEventsEventsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MarketingEventsExternalApiService PostMarketingV3MarketingEventsEventsDeleteArchiveBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsDeleteArchiveBatch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MarketingEventsExternalApiService PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalEventId string

		resp, httpRes, err := apiClient.MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel(context.Background(), externalEventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MarketingEventsExternalApiService PostMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalEventId string

		resp, httpRes, err := apiClient.MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete(context.Background(), externalEventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MarketingEventsExternalApiService PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalEventId string
		var subscriberState string

		resp, httpRes, err := apiClient.MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById(context.Background(), externalEventId, subscriberState).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MarketingEventsExternalApiService PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalEventId string
		var subscriberState string

		resp, httpRes, err := apiClient.MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById(context.Background(), externalEventId, subscriberState).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MarketingEventsExternalApiService PostMarketingV3MarketingEventsEventsUpsertDoUpsert", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsUpsertDoUpsert(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MarketingEventsExternalApiService PutMarketingV3MarketingEventsEventsExternalEventIdReplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalEventId string

		resp, httpRes, err := apiClient.MarketingEventsExternalApi.PutMarketingV3MarketingEventsEventsExternalEventIdReplace(context.Background(), externalEventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
