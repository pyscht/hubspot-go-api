/*
Accounting Extension

These APIs allow you to interact with HubSpot's Accounting Extension. It allows you to: * Specify the URLs that HubSpot will use when making webhook requests to your external accounting system. * Respond to webhook calls made to your external accounting system by HubSpot

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accounting

import (
	"encoding/json"
)

// checks if the Address type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Address{}

// Address Represents an address of a customer
type Address struct {
	// The country of the address.
	Country *string `json:"country,omitempty"`
	// A region of the county of the address.  May represent county, state etc.
	CountrySubDivisionCode *string `json:"countrySubDivisionCode,omitempty"`
	// The city of the address.
	City *string `json:"city,omitempty"`
	// The postcode/zipcode of the address.
	PostalCode *string `json:"postalCode,omitempty"`
	// The first line of the address.
	LineOne *string `json:"lineOne,omitempty"`
}

// NewAddress instantiates a new Address object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddress() *Address {
	this := Address{}
	return &this
}

// NewAddressWithDefaults instantiates a new Address object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressWithDefaults() *Address {
	this := Address{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Address) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Address) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *Address) SetCountry(v string) {
	o.Country = &v
}

// GetCountrySubDivisionCode returns the CountrySubDivisionCode field value if set, zero value otherwise.
func (o *Address) GetCountrySubDivisionCode() string {
	if o == nil || IsNil(o.CountrySubDivisionCode) {
		var ret string
		return ret
	}
	return *o.CountrySubDivisionCode
}

// GetCountrySubDivisionCodeOk returns a tuple with the CountrySubDivisionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetCountrySubDivisionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountrySubDivisionCode) {
		return nil, false
	}
	return o.CountrySubDivisionCode, true
}

// HasCountrySubDivisionCode returns a boolean if a field has been set.
func (o *Address) HasCountrySubDivisionCode() bool {
	if o != nil && !IsNil(o.CountrySubDivisionCode) {
		return true
	}

	return false
}

// SetCountrySubDivisionCode gets a reference to the given string and assigns it to the CountrySubDivisionCode field.
func (o *Address) SetCountrySubDivisionCode(v string) {
	o.CountrySubDivisionCode = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *Address) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *Address) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *Address) SetCity(v string) {
	o.City = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *Address) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *Address) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *Address) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetLineOne returns the LineOne field value if set, zero value otherwise.
func (o *Address) GetLineOne() string {
	if o == nil || IsNil(o.LineOne) {
		var ret string
		return ret
	}
	return *o.LineOne
}

// GetLineOneOk returns a tuple with the LineOne field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetLineOneOk() (*string, bool) {
	if o == nil || IsNil(o.LineOne) {
		return nil, false
	}
	return o.LineOne, true
}

// HasLineOne returns a boolean if a field has been set.
func (o *Address) HasLineOne() bool {
	if o != nil && !IsNil(o.LineOne) {
		return true
	}

	return false
}

// SetLineOne gets a reference to the given string and assigns it to the LineOne field.
func (o *Address) SetLineOne(v string) {
	o.LineOne = &v
}

func (o Address) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Address) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.CountrySubDivisionCode) {
		toSerialize["countrySubDivisionCode"] = o.CountrySubDivisionCode
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.PostalCode) {
		toSerialize["postalCode"] = o.PostalCode
	}
	if !IsNil(o.LineOne) {
		toSerialize["lineOne"] = o.LineOne
	}
	return toSerialize, nil
}

type NullableAddress struct {
	value *Address
	isSet bool
}

func (v NullableAddress) Get() *Address {
	return v.value
}

func (v *NullableAddress) Set(val *Address) {
	v.value = val
	v.isSet = true
}

func (v NullableAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddress(val *Address) *NullableAddress {
	return &NullableAddress{value: val, isSet: true}
}

func (v NullableAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
