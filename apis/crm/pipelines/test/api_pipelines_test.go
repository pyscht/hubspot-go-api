/*
CRM Pipelines

Testing PipelinesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pipelines

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/pyscht/hubspot-go-api/apis/crm/pipelines"
)

func Test_pipelines_PipelinesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PipelinesApiService DeleteCrmV3PipelinesObjectTypePipelineIdArchive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectType string
		var pipelineId string

		httpRes, err := apiClient.PipelinesApi.DeleteCrmV3PipelinesObjectTypePipelineIdArchive(context.Background(), objectType, pipelineId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesApiService GetCrmV3PipelinesObjectTypeGetAll", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectType string

		resp, httpRes, err := apiClient.PipelinesApi.GetCrmV3PipelinesObjectTypeGetAll(context.Background(), objectType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesApiService GetCrmV3PipelinesObjectTypePipelineIdGetById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectType string
		var pipelineId string

		resp, httpRes, err := apiClient.PipelinesApi.GetCrmV3PipelinesObjectTypePipelineIdGetById(context.Background(), objectType, pipelineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesApiService PatchCrmV3PipelinesObjectTypePipelineIdUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectType string
		var pipelineId string

		resp, httpRes, err := apiClient.PipelinesApi.PatchCrmV3PipelinesObjectTypePipelineIdUpdate(context.Background(), objectType, pipelineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesApiService PostCrmV3PipelinesObjectTypeCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectType string

		resp, httpRes, err := apiClient.PipelinesApi.PostCrmV3PipelinesObjectTypeCreate(context.Background(), objectType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesApiService PutCrmV3PipelinesObjectTypePipelineIdReplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectType string
		var pipelineId string

		resp, httpRes, err := apiClient.PipelinesApi.PutCrmV3PipelinesObjectTypePipelineIdReplace(context.Background(), objectType, pipelineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
