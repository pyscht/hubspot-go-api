/*
HubDB endpoints

Testing TablesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package hubdb

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/pyscht/hubspot-go-api/apis/cms/hubdb"
)

func Test_hubdb_TablesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TablesApiService DeleteCmsV3HubdbTablesTableIdOrNameArchiveTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tableIdOrName string

		httpRes, err := apiClient.TablesApi.DeleteCmsV3HubdbTablesTableIdOrNameArchiveTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService GetCmsV3HubdbTablesDraftGetAllDraftTables", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TablesApi.GetCmsV3HubdbTablesDraftGetAllDraftTables(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService GetCmsV3HubdbTablesGetAllTables", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TablesApi.GetCmsV3HubdbTablesGetAllTables(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService GetCmsV3HubdbTablesTableIdOrNameDraftExportExportDraftTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.GetCmsV3HubdbTablesTableIdOrNameDraftExportExportDraftTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService GetCmsV3HubdbTablesTableIdOrNameDraftGetDraftTableDetailsById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.GetCmsV3HubdbTablesTableIdOrNameDraftGetDraftTableDetailsById(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService GetCmsV3HubdbTablesTableIdOrNameExportExportTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.GetCmsV3HubdbTablesTableIdOrNameExportExportTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService GetCmsV3HubdbTablesTableIdOrNameGetTableDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.GetCmsV3HubdbTablesTableIdOrNameGetTableDetails(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService PostCmsV3HubdbTablesCreateTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TablesApi.PostCmsV3HubdbTablesCreateTable(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService PostCmsV3HubdbTablesTableIdOrNameDraftImportImportDraftTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.PostCmsV3HubdbTablesTableIdOrNameDraftImportImportDraftTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService PostCmsV3HubdbTablesTableIdOrNameDraftPublishPublishDraftTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.PostCmsV3HubdbTablesTableIdOrNameDraftPublishPublishDraftTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService PostCmsV3HubdbTablesTableIdOrNameDraftResetResetDraftTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.PostCmsV3HubdbTablesTableIdOrNameDraftResetResetDraftTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService PostCmsV3HubdbTablesTableIdOrNameUnpublishUnpublishTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.PostCmsV3HubdbTablesTableIdOrNameUnpublishUnpublishTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
