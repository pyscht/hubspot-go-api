/*
Blog Post endpoints

Testing BlogPostsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package blog-posts

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/pyscht/hubspot-go-api/apis/cms/blog-posts"
)

func Test_blog-posts_BlogPostsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BlogPostsApiService DeleteCmsV3BlogsPostsObjectIdArchive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId string

		httpRes, err := apiClient.BlogPostsApi.DeleteCmsV3BlogsPostsObjectIdArchive(context.Background(), objectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService GetCmsV3BlogsPostsGetPage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogPostsApi.GetCmsV3BlogsPostsGetPage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService GetCmsV3BlogsPostsObjectIdDraftGetDraftById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId string

		resp, httpRes, err := apiClient.BlogPostsApi.GetCmsV3BlogsPostsObjectIdDraftGetDraftById(context.Background(), objectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService GetCmsV3BlogsPostsObjectIdGetById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId string

		resp, httpRes, err := apiClient.BlogPostsApi.GetCmsV3BlogsPostsObjectIdGetById(context.Background(), objectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService GetCmsV3BlogsPostsObjectIdRevisionsGetPreviousVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId string

		resp, httpRes, err := apiClient.BlogPostsApi.GetCmsV3BlogsPostsObjectIdRevisionsGetPreviousVersions(context.Background(), objectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId string
		var revisionId string

		resp, httpRes, err := apiClient.BlogPostsApi.GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersion(context.Background(), objectId, revisionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PatchCmsV3BlogsPostsObjectIdDraftUpdateDraft", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId string

		resp, httpRes, err := apiClient.BlogPostsApi.PatchCmsV3BlogsPostsObjectIdDraftUpdateDraft(context.Background(), objectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PatchCmsV3BlogsPostsObjectIdUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId string

		resp, httpRes, err := apiClient.BlogPostsApi.PatchCmsV3BlogsPostsObjectIdUpdate(context.Background(), objectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PostCmsV3BlogsPostsBatchArchiveArchiveBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.BlogPostsApi.PostCmsV3BlogsPostsBatchArchiveArchiveBatch(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PostCmsV3BlogsPostsBatchCreateCreateBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogPostsApi.PostCmsV3BlogsPostsBatchCreateCreateBatch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PostCmsV3BlogsPostsBatchReadReadBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogPostsApi.PostCmsV3BlogsPostsBatchReadReadBatch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PostCmsV3BlogsPostsBatchUpdateUpdateBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogPostsApi.PostCmsV3BlogsPostsBatchUpdateUpdateBatch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PostCmsV3BlogsPostsCloneClone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogPostsApi.PostCmsV3BlogsPostsCloneClone(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PostCmsV3BlogsPostsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogPostsApi.PostCmsV3BlogsPostsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PostCmsV3BlogsPostsMultiLanguageAttachToLangGroupAttachToLangGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogPostsApi.PostCmsV3BlogsPostsMultiLanguageAttachToLangGroupAttachToLangGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PostCmsV3BlogsPostsMultiLanguageCreateLanguageVariationCreateLangVariation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogPostsApi.PostCmsV3BlogsPostsMultiLanguageCreateLanguageVariationCreateLangVariation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PostCmsV3BlogsPostsMultiLanguageDetachFromLangGroupDetachFromLangGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogPostsApi.PostCmsV3BlogsPostsMultiLanguageDetachFromLangGroupDetachFromLangGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PostCmsV3BlogsPostsMultiLanguageUpdateLanguagesUpdateLangs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlogPostsApi.PostCmsV3BlogsPostsMultiLanguageUpdateLanguagesUpdateLangs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PostCmsV3BlogsPostsObjectIdDraftPushLivePushLive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId string

		httpRes, err := apiClient.BlogPostsApi.PostCmsV3BlogsPostsObjectIdDraftPushLivePushLive(context.Background(), objectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PostCmsV3BlogsPostsObjectIdDraftResetResetDraft", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId string

		httpRes, err := apiClient.BlogPostsApi.PostCmsV3BlogsPostsObjectIdDraftResetResetDraft(context.Background(), objectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId string
		var revisionId string

		resp, httpRes, err := apiClient.BlogPostsApi.PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersion(context.Background(), objectId, revisionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreToDraftRestorePreviousVersionToDraft", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId string
		var revisionId int64

		resp, httpRes, err := apiClient.BlogPostsApi.PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreToDraftRestorePreviousVersionToDraft(context.Background(), objectId, revisionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PostCmsV3BlogsPostsScheduleSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.BlogPostsApi.PostCmsV3BlogsPostsScheduleSchedule(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogPostsApiService PutCmsV3BlogsPostsMultiLanguageSetNewLangPrimarySetLangPrimary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.BlogPostsApi.PutCmsV3BlogsPostsMultiLanguageSetNewLangPrimarySetLangPrimary(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
