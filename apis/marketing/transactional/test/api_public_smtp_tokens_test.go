/*
Transactional Email

Testing PublicSmtpTokensApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package transactional

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/pyscht/hubspot-go-api/apis/marketing/transactional"
)

func Test_transactional_PublicSmtpTokensApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PublicSmtpTokensApiService DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		httpRes, err := apiClient.PublicSmtpTokensApi.DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveToken(context.Background(), tokenId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicSmtpTokensApiService GetMarketingV3TransactionalSmtpTokensGetTokensPage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicSmtpTokensApi.GetMarketingV3TransactionalSmtpTokensGetTokensPage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicSmtpTokensApiService GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.PublicSmtpTokensApi.GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenById(context.Background(), tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicSmtpTokensApiService PostMarketingV3TransactionalSmtpTokensCreateToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicSmtpTokensApi.PostMarketingV3TransactionalSmtpTokensCreateToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicSmtpTokensApiService PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.PublicSmtpTokensApi.PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPassword(context.Background(), tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
