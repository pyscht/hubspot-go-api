/*
CRM Pipelines

Testing PipelineStagesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pipelines

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/pyscht/hubspot-go-api/apis/crm/pipelines"
)

func Test_pipelines_PipelineStagesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PipelineStagesApiService DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectType string
		var pipelineId string
		var stageId string

		httpRes, err := apiClient.PipelineStagesApi.DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchive(context.Background(), objectType, pipelineId, stageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelineStagesApiService GetCrmV3PipelinesObjectTypePipelineIdStagesGetAll", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectType string
		var pipelineId string

		resp, httpRes, err := apiClient.PipelineStagesApi.GetCrmV3PipelinesObjectTypePipelineIdStagesGetAll(context.Background(), objectType, pipelineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelineStagesApiService GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectType string
		var pipelineId string
		var stageId string

		resp, httpRes, err := apiClient.PipelineStagesApi.GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetById(context.Background(), objectType, pipelineId, stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelineStagesApiService PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectType string
		var pipelineId string
		var stageId string

		resp, httpRes, err := apiClient.PipelineStagesApi.PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdate(context.Background(), objectType, pipelineId, stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelineStagesApiService PostCrmV3PipelinesObjectTypePipelineIdStagesCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectType string
		var pipelineId string

		resp, httpRes, err := apiClient.PipelineStagesApi.PostCrmV3PipelinesObjectTypePipelineIdStagesCreate(context.Background(), objectType, pipelineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelineStagesApiService PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectType string
		var pipelineId string
		var stageId string

		resp, httpRes, err := apiClient.PipelineStagesApi.PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplace(context.Background(), objectType, pipelineId, stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
